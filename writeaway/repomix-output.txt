This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-09T01:36:02.293Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
app/
  (auth)/
    sign-in/
      page.tsx
    sign-up/
      page.tsx
    layout.tsx
  (root)/
    canvas/
      page.tsx
    home/
      page.tsx
    screenplay/
      page.tsx
    layout.tsx
  api/
    auth/
      [...nextauth]/
        route.ts
      register/
        route.ts
  globals.css
  layout.tsx
  page.tsx

================================================================
Files
================================================================

================
File: app/(auth)/sign-in/page.tsx
================
"use client";

import { useForm } from "react-hook-form";
import { signIn } from "next-auth/react";
import { useRouter } from "next/navigation";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input"; 
import { Label } from "@/components/ui/label";
import { Card, CardContent } from "@/components/ui/card";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { useState } from "react";

const SignInSchema = z.object({
  email: z.string().email("Invalid email"),
  password: z.string().min(6, "At least 6 characters"),
});

export default function SignInPage() {
  const router = useRouter();
  const [errorMessage, setErrorMessage] = useState<string | null>(null);

  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<z.infer<typeof SignInSchema>>({
    resolver: zodResolver(SignInSchema),
  });

  async function onSubmit(data: z.infer<typeof SignInSchema>) {
    setErrorMessage(null);

    const result = await signIn("credentials", {
      redirect: false,
      email: data.email,
      password: data.password,
    });

    if (result?.error) {
      setErrorMessage(result.error);
      return;
    }

    router.push("/home");
  }

  return (
    <div className="flex flex-col gap-6">
      <Card className="overflow-hidden">
        <CardContent className="grid p-0 md:grid-cols-2">
          <form onSubmit={handleSubmit(onSubmit)} className="p-6 md:p-8">
            <div className="flex flex-col gap-6">
              <div className="flex flex-col items-center text-center">
                <h1 className="text-2xl font-bold">Welcome back</h1>
                <p className="text-balance text-muted-foreground">
                  Login to your account
                </p>
              </div>

              <div className="grid gap-2">
                <Label htmlFor="email">Email</Label>
                <Input 
                  id="email"
                  type="email"
                  placeholder="m@example.com"
                  {...register("email")}
                />
                {errors.email && <p className="text-red-500 text-sm">{errors.email.message}</p>}
              </div>

              <div className="grid gap-2">
                <div className="flex items-center">
                  <Label htmlFor="password">Password</Label>
                  <a href="#" className="ml-auto text-sm underline-offset-2 hover:underline">
                    Forgot password?
                  </a>
                </div>
                <Input id="password" type="password" {...register("password")} />
                {errors.password && <p className="text-red-500 text-sm">{errors.password.message}</p>}
              </div>

              {errorMessage && <p className="text-red-500 text-sm">{errorMessage}</p>}

              <Button type="submit" className="w-full">
                Login
              </Button>

              <div className="relative text-center text-sm after:absolute after:inset-0 after:top-1/2 after:z-0 after:flex after:items-center after:border-t after:border-border">
                <span className="relative z-10 bg-background px-2 text-muted-foreground">
                  Or continue with
                </span>
              </div>

              <div className="grid grid-cols-3 gap-4">
                <Button variant="outline" className="w-full">
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                    <path d="M12.152 6.896c-.948 0-2.415-1.078-3.96-1.04-2.04.027-3.91 1.183-4.961 3.014-2.117 3.675-.546 9.103 1.519 12.09 1.013 1.454 2.208 3.09 3.792 3.039 1.52-.065 2.09-.987 3.935-.987 1.831 0 2.35.987 3.96.948 1.637-.026 2.676-1.48 3.676-2.948 1.156-1.688 1.636-3.325 1.662-3.415-.039-.013-3.182-1.221-3.22-4.857-.026-3.04 2.48-4.494 2.597-4.559-1.429-2.09-3.623-2.324-4.39-2.376-2-.156-3.675 1.09-4.61 1.09z" fill="currentColor"/>
                  </svg>
                  <span className="sr-only">Login with Apple</span>
                </Button>
                <Button variant="outline" className="w-full">
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                    <path d="M12.48 10.92v3.28h7.84c-.24 1.84-.853 3.187-1.787 4.133-1.147 1.147-2.933 2.4-6.053 2.4-4.827 0-8.6-3.893-8.6-8.72s3.773-8.72 8.6-8.72c2.6 0 4.507 1.027 5.907 2.347l2.307-2.307C18.747 1.44 16.133 0 12.48 0 5.867 0 .307 5.387.307 12s5.56 12 12.173 12c3.573 0 6.267-1.173 8.373-3.36 2.16-2.16 2.84-5.213 2.84-7.667 0-.76-.053-1.467-.173-2.053H12.48z" fill="currentColor"/>
                  </svg>
                  <span className="sr-only">Login with Google</span>
                </Button>
                <Button variant="outline" className="w-full">
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                    <path d="M6.915 4.03c-1.968 0-3.683 1.28-4.871 3.113C.704 9.208 0 11.883 0 14.449c0 .706.07 1.369.21 1.973a6.624 6.624 0 0 0 .265.86 5.297 5.297 0 0 0 .371.761c.696 1.159 1.818 1.927 3.593 1.927 1.497 0 2.633-.671 3.965-2.444.76-1.012 1.144-1.626 2.663-4.32l.756-1.339.186-.325c.061.1.121.196.183.3l2.152 3.595c.724 1.21 1.665 2.556 2.47 3.314 1.046.987 1.992 1.22 3.06 1.22 1.075 0 1.876-.355 2.455-.843a3.743 3.743 0 0 0 .81-.973c.542-.939.861-2.127.861-3.745 0-2.72-.681-5.357-2.084-7.45-1.282-1.912-2.957-2.93-4.716-2.93-1.047 0-2.088.467-3.053 1.308-.652.57-1.257 1.29-1.82 2.05-.69-.875-1.335-1.547-1.958-2.056-1.182-.966-2.315-1.303-3.454-1.303z" fill="currentColor"/>
                  </svg>
                  <span className="sr-only">Login with Meta</span>
                </Button>
              </div>

              <div className="text-center text-sm">
                Don&apos;t have an account?{" "}
                <a href="/sign-up" className="underline underline-offset-4">
                  Sign up
                </a>
              </div>
            </div>
          </form>
          <div className="relative hidden bg-muted md:block">
            <img
              src="/placeholder.svg"
              alt="Image" 
              className="absolute inset-0 h-full w-full object-cover dark:brightness-[0.2] dark:grayscale"
            />
          </div>
        </CardContent>
      </Card>
      <div className="text-balance text-center text-xs text-muted-foreground [&_a]:underline [&_a]:underline-offset-4 hover:[&_a]:text-primary">
        By clicking continue, you agree to our <a href="#">Terms of Service</a>{" "}
        and <a href="#">Privacy Policy</a>.
      </div>
    </div>
  );
}

================
File: app/(auth)/sign-up/page.tsx
================
"use client";

import { useForm } from "react-hook-form";
import { useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { useState } from "react";

const SignUpSchema = z.object({
  name: z.string().min(2, "Name must have at least 2 chars"),
  email: z.string().email("Invalid email"),
  password: z.string().min(6, "At least 6 chars"),
});

export default function SignUpPage() {
  const router = useRouter();
  const [errorMessage, setErrorMessage] = useState<string | null>(null);

  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<z.infer<typeof SignUpSchema>>({
    resolver: zodResolver(SignUpSchema),
  });

  async function onSubmit(data: z.infer<typeof SignUpSchema>) {
    setErrorMessage(null);

    const res = await fetch("/api/auth/register", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(data),
    });

    if (!res.ok) {
      const { error } = await res.json();
      setErrorMessage(error || "Something went wrong");
      return;
    }

    router.push("/sign-in");
  }

  return (
    <main className="w-full max-w-sm mx-auto px-4">
      <h1 className="text-3xl font-bold text-center mb-6">Sign Up</h1>

      <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
        <div>
          <Label htmlFor="name">Name</Label>
          <Input id="name" type="text" {...register("name")} />
          {errors.name && <p className="text-red-500 text-sm">{errors.name.message}</p>}
        </div>

        <div>
          <Label htmlFor="email">Email</Label>
          <Input id="email" type="email" {...register("email")} />
          {errors.email && <p className="text-red-500 text-sm">{errors.email.message}</p>}
        </div>

        <div>
          <Label htmlFor="password">Password</Label>
          <Input id="password" type="password" {...register("password")} />
          {errors.password && <p className="text-red-500 text-sm">{errors.password.message}</p>}
        </div>

        {errorMessage && <p className="text-red-500 text-sm">{errorMessage}</p>}

        <Button type="submit" className="w-full">Create Account</Button>
      </form>

      <div className="text-center mt-4">
        <p className="text-sm">
          Already have an account?{" "}
          <a href="/sign-in" className="text-blue-600 hover:underline font-semibold">
            Sign In
          </a>
        </p>
      </div>
    </main>
  );
}

================
File: app/(auth)/layout.tsx
================
import Image from "next/image";

export default function AuthLayout({ children }: { children: React.ReactNode }) {
  return (
    <div className="flex min-h-svh flex-col items-center justify-center bg-muted p-6 md:p-10">
      <div className="w-full max-w-sm md:max-w-3xl">
        {children}
      </div>
    </div>
  )
}

================
File: app/(root)/canvas/page.tsx
================
"use client";

import React from "react";
import Canvas from "@/components/canvas";

// This page is displayed when user clicks "Canvas" in the sidebar

export default function CanvasPage() {
  return (
    <div className="w-full h-full">
      <Canvas />
    </div>
  );
}

================
File: app/(root)/home/page.tsx
================
"use client";

import { useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";
import { useState } from "react";

export default function HomePage() {
  const [projectName, setProjectName] = useState("");
  const router = useRouter();

  function handleCreateProject() {
    router.push("/screenplay");
  }

  return (
    <div className="flex min-h-screen items-center justify-center">
      <div className="text-center">
        <h1 className="text-3xl font-bold mb-4">Start Writing</h1>
        <Button 
          className=" items-center"
          onClick={handleCreateProject}
        >
          {projectName ? `Create Project: ${projectName}` : "Create a Project"}
        </Button>
      </div>
    </div>
  );
}

================
File: app/(root)/screenplay/page.tsx
================
"use client";

import React from "react";

// Basic placeholder "Screenplay" component.
// In a real app, you could incorporate the "SettingsDialog" or a text editor here.

export default function ScreenplayPage() {
  return (
    <div className="p-8 w-full h-full">
      <h1 className="text-2xl font-bold mb-4">Your Screenplay</h1>
      <p className="mb-4">
        This is where you'd start writing or editing your screenplay. 
        You can replace this placeholder with a proper editor or custom UI.
      </p>
      {/* Add your screenplay-related components here */}
    </div>
  );
}

================
File: app/(root)/layout.tsx
================
import { Roboto } from "next/font/google";
import type { Metadata } from "next";
import { getServerSession } from "next-auth/next";
import { redirect } from "next/navigation";
import { authOptions } from "@/app/api/auth/[...nextauth]/route";
import { SidebarProvider, SidebarInset, SidebarTrigger } from "@/components/ui/sidebar";
import { AppSidebar } from "@/components/sidebar/app-sidebar";
import "../globals.css";
import { Geist, Azeret_Mono as Geist_Mono } from 'next/font/google'
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from "@/components/ui/tabs"
import ScreenplayPage from "./screenplay/page";

const geistSans = Geist({
  subsets: ['latin'],
  variable: '--font-sans',
})
const geistMono = Geist_Mono({
  subsets: ['latin'],
  variable: '--font-mono',
})
export const metadata: Metadata = {
  title: "WriteAway",
  description: "Requires login to access",
};

export default async function RootLayout({ children }: { children: React.ReactNode }) {
  const session = await getServerSession(authOptions);
  if (!session) {
    redirect("/sign-in");
  }

  return (
    <html lang="en" className={`${geistSans.variable} h-full`}>
      <body className="h-full flex">
        <SidebarProvider defaultOpen>
          <AppSidebar />
          <SidebarInset className="flex-1 flex flex-col min-h-screen">
            <div className="h-full flex flex-col relative">
              <div className="absolute top-4 left-4 z-10">
                <SidebarTrigger className="-ml-1" />
              </div>
              <main className="flex flex-1 flex-col w-full h-full">{children}</main>            
            </div>
          </SidebarInset>
        </SidebarProvider>
      </body>
    </html>
  );
}

================
File: app/api/auth/[...nextauth]/route.ts
================
import NextAuth, { AuthOptions } from "next-auth";
import CredentialsProvider from "next-auth/providers/credentials";
import { PrismaClient } from "@prisma/client";
import bcrypt from "bcryptjs";

const prisma = new PrismaClient();

export const authOptions: AuthOptions = {
  providers: [
    CredentialsProvider({
      name: "Credentials",
      credentials: {
        email: { label: "Email", type: "text" },
        password: { label: "Password", type: "password" },
      },
      async authorize(credentials) {
        if (!credentials?.email || !credentials?.password) {
          throw new Error("Missing email or password");
        }

        const user = await prisma.user.findUnique({
          where: { email: credentials.email },
        });
        
        if (!user) {
          throw new Error("No user found");
        }

        const isValid = await bcrypt.compare(credentials.password, user.password);
        if (!isValid) {
          throw new Error("Invalid password");
        }

        return {
          id: user.id,
          name: user.name,
          email: user.email,
        };
      },
    }),
  ],
  session: {
    strategy: "jwt",
  },
  pages: {
    signIn: "/sign-in",
  },
  secret: process.env.NEXTAUTH_SECRET,
  callbacks: {
    async jwt({ token, user }) {
      if (user) {
        token.id = user.id;
        token.email = user.email;
        token.name = user.name;
      }
      return token;
    },
    async session({ session, token }) {
      if (session.user) {
        (session.user as any).id = token.id;
      }
      return session;
    },
  },
};

const handler = NextAuth(authOptions);
export { handler as GET, handler as POST };

================
File: app/api/auth/register/route.ts
================
import { NextResponse } from "next/server";
import bcrypt from "bcryptjs";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

export async function POST(request: Request) {
  try {
    const { email, password, name } = await request.json();

    // check if user already exists
    const existing = await prisma.user.findUnique({ where: { email } });
    if (existing) {
      return NextResponse.json(
        { error: "User already exists" },
        { status: 400 },
      );
    }

    // hash password
    const hashed = await bcrypt.hash(password, 10);

    // create user
    await prisma.user.create({
      data: { name, email, password: hashed },
    });

    return NextResponse.json({ message: "User created successfully" }, { status: 201 });
  } catch (err) {
    console.error("Registration error:", err);
    return NextResponse.json({ error: "Something went wrong" }, { status: 500 });
  }
}

================
File: app/globals.css
================
/* -- 1. Tailwind base/styles -- */
@tailwind base;
@tailwind components;
@tailwind utilities;

/* -- 2. Global resets & font setup -- */
html {
  /* keeps the “light” color scheme for OS-level user settings 
     so the browser doesn’t auto-invert colors in dark mode */
  color-scheme: white;

  /* set font globally to Courier New */
  font-family: "Roboto", serif;
  font-weight: 100;
  font-style: normal;
}

.roboto-thin {
  font-family: "Roboto", serif;
  font-weight: 100;
  font-style: normal;
}

.roboto-light {
  font-family: "Roboto", serif;
  font-weight: 300;
  font-style: normal;
}

.roboto-regular {
  font-family: "Roboto", serif;
  font-weight: 400;
  font-style: normal;
}

.roboto-medium {
  font-family: "Roboto", serif;
  font-weight: 500;
  font-style: normal;
}

.roboto-bold {
  font-family: "Roboto", serif;
  font-weight: 700;
  font-style: normal;
}

.roboto-black {
  font-family: "Roboto", serif;
  font-weight: 900;
  font-style: normal;
}

.roboto-thin-italic {
  font-family: "Roboto", serif;
  font-weight: 100;
  font-style: italic;
}

.roboto-light-italic {
  font-family: "Roboto", serif;
  font-weight: 300;
  font-style: italic;
}

.roboto-regular-italic {
  font-family: "Roboto", serif;
  font-weight: 400;
  font-style: italic;
}

.roboto-medium-italic {
  font-family: "Roboto", serif;
  font-weight: 500;
  font-style: italic;
}

.roboto-bold-italic {
  font-family: "Roboto", serif;
  font-weight: 700;
  font-style: italic;
}

.roboto-black-italic {
  font-family: "Roboto", serif;
  font-weight: 900;
  font-style: italic;
}


body {
  margin: 0;
  padding: 0;
  /* explicitly set the background to white */
  background-color: #ffffff;
}

/* -- 3. Tailwind base layer overrides -- */
@layer base {
  @font-face {
    font-family: 'ScreenplayFont';
    src: local('Courier New');
  }

  /* if you still want the border styling from your theme */
  * {
    @apply border-border;
  }

  body {
    /* ensure text is black (Tailwind’s .text-black class) */
    @apply text-black;
  }
  :root {
    --sidebar-background: 0 0% 98%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 240 5.9% 10%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
  .dark {
    --sidebar-background: 240 5.9% 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 224.3 76.3% 48%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
}

/* -- 4. Custom Page & Navbar styling -- */

/* Helps pages fill the entire viewport height */
.page-container {
  min-height: 100vh;
  display: flex;
  flex-direction: column;
}

/* Navbar styling */
.navbar {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 1rem;
  border-bottom: 1px solid #ffffff;
  position: fixed; /* Stay at the top */
  top: 0;
  left: 0;
  right: 0;
  background-color: #ffffff;
  z-index: 20; /* Ensure it's above the canvas */
  flex-wrap: nowrap;
}

/* Brand text */
.navbar-brand {
  font-weight: bold;
  font-size: 1.4rem;
}

/* Action button styling */
.action-btn {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: 6px 12px;
  margin-left: 1rem;
  font-size: 14px;
  font-weight: 600;
  color: #ffffff;
  background-color: #000000;
  border: none; /* Remove default border */
  border-radius: 8px;
  transition: all 200ms ease-in-out;
  position: relative;
  z-index: 5;
}

.action-btn-special {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: 6px 12px;
  margin-left: 1rem;
   font-size: 14px;
  font-weight: 600;
  color: black;
  background-color: lightcoral;
  border: none; /* Remove default border */
  border-radius: 8px;
  transition: all 200ms ease-in-out;
  position: relative;
  z-index: 5;
}

/* Remove left margin for the very first button if you like */
.action-btn:first-of-type {
  margin-left: 0;
}

/* Hover and active states */
.action-btn:hover {
  outline-color: #CCCCCC;
  background-color: rgba(0, 0, 0, 0.9);
}

.action-btn:active {
  transform: scale(0.97);
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

/* globals.css */

/* SceneBox styles */
.scene-box {
  @apply relative
    min-w-[200px]
    min-h-[120px]
    p-3
    border
    border-gray-300
    bg-white
    shadow-sm
    rounded-xl; /* ensures corners are truly rounded */
}

/* Expand icon in the top-right corner */
.scene-box__expand-button {
  @apply absolute top-2 right-2 cursor-pointer;
}

/* Popover content above the SceneBox */
.scene-box__popover-content {
  @apply w-40 flex flex-col space-y-2;
}

/* Main toolbox (bottom “spaceship” or “jar”) */
.toolbox2-container {
  @apply fixed
    bottom-4
    left-1/2
    -translate-x-1/2
    z-50
    bg-gray-200
    shadow-lg
    flex
    items-center
    justify-evenly
    px-4
    h-[60px]
    w-[300px]
    rounded-tl-3xl
    rounded-tr-3xl
    rounded-bl-full
    rounded-br-full;
}

.toolbox2-content {
  @apply w-44 text-sm;
}

/* A vertical separator inside Toolbox2 if you like */
.toolbox2-separator {
  @apply w-[1px] h-6 bg-gray-400;
}






/* ===========================
   GLOBAL RESETS & VARIABLES
   =========================== */
/* Feel free to add a CSS reset or variables here. */

/* For illustration only, you can place your color variables / custom properties here. */
/*
:root {
  --color-border: #e5e7eb;
  --color-bg: #ffffff;
  --color-text: #111827;
  --color-primary: #3490dc;
  --color-danger: #dc2626;
}
*/

/* ===========================
   SIDEBAR WRAPPERS
   =========================== */
   .sidebar {
    position: fixed;
    top: 0;
    left: 0;
    height: 100vh;
    width: 250px;
    background-color: white;
    border-right: 1px solid #e5e7eb;
    transition: width 0.3s ease;
    z-index: 30; /* Keep it above other elements if needed */
  }
  
  .sidebar-header,
  .sidebar-footer {
    border-bottom: 1px solid #e5e7eb;
    padding: 1rem;
  }
  
  .sidebar-footer {
    border-top: 1px solid #e5e7eb;
    border-bottom: none;
  }
  
  .sidebar-header-inner {
    display: flex;
    align-items: center;
    justify-content: space-between;
  }
  
  .sidebar-brand {
    display: flex;
    align-items: center;
    gap: 0.75rem; /* Adjust if you like */
  }
  
  .sidebar-brand-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 2rem;
    height: 2rem;
    border: 2px solid #3490dc;
    background-color: #3490dc;
    color: #ffffff;
    font-weight: bold;
    border-radius: 9999px; /* Full circle */
  }
  
  .sidebar-brand-text {
    font-weight: bold;
    font-size: 1.25rem;
  }
  
  .hidden-when-collapsed {
    /* Example of hooking into your collapsible logic. 
       If your JavaScript toggles a state, you can hide or show this. */
    /* By default, no special rules are applied here.
       You could handle `[data-state=collapsed]` or a parent class, etc. */
  }
  
  .sidebar-content {
    overflow-y: auto;
    height: calc(100vh - 8rem); /* Adjust if needed based on header/footer */
    padding: 1rem;
  }
  
  .sidebar-rail {
    display: none; /* If you want a "rail" style, define it here. */
  }
  
  /* ===========================
     NAV / MENUS / COLLAPSIBLES
     =========================== */
  .nav-main-group,
  .nav-projects-group,
  .nav-user-menu {
    /* Just placeholders; style to your preference. */
  }
  
  .nav-main-menu,
  .nav-projects-menu {
    /* Another placeholder style. */
  }
  
  .nav-item {
    /* Container for each item in the nav. */
    margin-bottom: 0.5rem;
  }
  
  .nav-item-button {
    display: flex;
    align-items: center;
    background: transparent;
    border: none;
    padding: 0.25rem 0.5rem;
    width: 100%;
    cursor: pointer;
  }
  
  .nav-item-button:hover {
    background-color: #f9fafb;
  }
  
  .nav-item-label {
    margin-left: 0.5rem;
  }
  
  /* Scenes collapsible or any nested collapsible */
  .scenes-collapsible {
    margin-top: 0.5rem;
  }
  
  /* Indent scene items a bit more */
  .indent-scene {
    margin-left: 1.5rem;
  }
  
  /* Collapsible triggers */
  .collapsible-trigger {
    display: flex;
    align-items: center;
    width: 100%;
  }
  
  /* Rotating icon if needed */
  .rotate-icon {
    margin-left: auto; 
    transition: transform 0.3s ease;
  }
  .collapsible[data-state="open"] .rotate-icon {
    transform: rotate(90deg);
  }
  
  .collapsible-content {
    margin-left: 1rem;
    margin-top: 0.25rem;
  }
  
  /* ===========================
     DROPDOWN MENUS
     =========================== */
  .dropdown-content {
    background: #ffffff;
    border: 1px solid #e5e7eb;
    border-radius: 0.25rem;
    padding: 0.25rem 0;
    min-width: 10rem;
    box-shadow: 0 4px 8px rgba(0,0,0,0.05);
  }
  
  .dropdown-item {
    display: flex;
    align-items: center;
    padding: 0.5rem 0.75rem;
    font-size: 0.875rem;
    cursor: pointer;
  }
  
  .dropdown-item:hover {
    background-color: #f9fafb;
  }
  
  .dropdown-separator {
    border-bottom: 1px solid #e5e7eb;
    margin: 0.25rem 0;
  }
  
  .text-danger {
    color: #dc2626; /* Danger color */
  }
  
  /* Label inside dropdown */
  .dropdown-label {
    display: block;
    padding: 0.5rem 0.75rem;
    font-size: 0.875rem;
    color: #6b7280; /* A subtle text color */
  }
  
  /* Submenus, if needed */
  .nav-submenu {
    margin-top: 0.5rem;
  }
  
  .nav-submenu-item {
    margin-bottom: 0.25rem;
  }
  
  .nav-submenu-button {
    display: flex;
    align-items: center;
    width: 100%;
    background: transparent;
    border: none;
    padding: 0.25rem 0.5rem;
    cursor: pointer;
    font-size: 0.875rem;
  }
  
  .nav-submenu-button:hover {
    background-color: #f9fafb;
  }
  
  /* ===========================
     BUTTONS
     =========================== */
  .button {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 0.5rem 0.75rem;
    font-size: 0.875rem;
    cursor: pointer;
    border-radius: 0.25rem;
    border: 1px solid transparent;
    background-color: #f3f4f6;
    transition: background-color 0.3s ease;
  }
  
  .button:hover {
    background-color: #e5e7eb;
  }
  
  .button-ghost {
    background-color: transparent;
    border-color: transparent;
    padding: 0.5rem;
  }
  
  .button-icon {
    width: 2rem;
    height: 2rem;
    padding: 0;
  }
  
  .button-sm {
    padding: 0.25rem 0.5rem;
    font-size: 0.8125rem; /* 13px approx. */
  }
  
  /* ===========================
     INPUTS (e.g., rename input)
     =========================== */
  .rename-input {
    width: 100%;
    font-size: 0.875rem;
    padding: 0.25rem 0.5rem;
    border: 1px solid #e5e7eb;
    border-radius: 0.25rem;
  }
  
  /* ===========================
     ICONS
     =========================== */
  .icon-small {
    width: 1rem;
    height: 1rem;
    flex-shrink: 0;
  }
  
  .mr-1 {
    margin-right: 0.25rem;
  }
  
  .ml-auto {
    margin-left: auto;
  }
  
  /* ===========================
     AVATAR / USER INFO
     =========================== */
  .nav-user-button {
    display: flex;
    align-items: center;
    width: 100%;
    background: transparent;
    border: none;
    padding: 0.5rem;
    cursor: pointer;
    text-align: left;
  }
  
  .nav-user-avatar {
    width: 2rem;
    height: 2rem;
    border-radius: 0.25rem;
    overflow: hidden;
  }
  
  .nav-user-avatar-fallback {
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: #ccc;
    color: #fff;
  }
  
  .nav-user-info {
    display: flex;
    flex-direction: column;
    margin-left: 0.5rem;
    overflow: hidden;
  }
  
  .nav-user-name {
    font-size: 0.875rem;
    font-weight: 600;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }
  
  .nav-user-email {
    font-size: 0.75rem;
    color: #6b7280;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }
  
  .nav-user-dropdown-header {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.25rem 0;
  }

================
File: app/layout.tsx
================
import "./globals.css";
import { GeistSans } from "geist/font/sans";
import { GeistMono } from "geist/font/mono";
import { Geist, Azeret_Mono as Geist_Mono } from 'next/font/google'
import type { Metadata } from "next";

const geistSans = Geist({
  subsets: ['latin'],
  variable: '--font-sans',
})
const geistMono = Geist_Mono({
  subsets: ['latin'],
  variable: '--font-mono',
})

export const metadata: Metadata = {
  title: "WriteAway",
  description: "Public layout (landing, etc.)",
};

export default function Layout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} font-sans antialiased bg-background text-foreground`}
      >
        {children}
      </body>
    </html>
  )
}

================
File: app/page.tsx
================
"use client";
import { LandingPage } from "@/components/landing-page/landingpage";  // or wherever you placed it

export default function RootLanding() {
  return <LandingPage />;
}
