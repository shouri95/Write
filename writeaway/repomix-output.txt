This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-31T07:19:56.682Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Directory Structure
================================================================
components/
  app-sidebar.tsx
  canvas.tsx
  scenebox.tsx
  toolbox1.tsx
  toolbox2.tsx
  topbar.tsx

================================================================
Files
================================================================

================
File: components/app-sidebar.tsx
================
"use client"

import * as React from "react"
import { Plus, ChevronLeft, ChevronRight, User2 } from 'lucide-react'
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarHeader,
  SidebarTrigger,
  SidebarProvider
} from "@/components/ui/sidebar"

const projects = [
  { id: 1, name: "Project 1" },
  { id: 2, name: "Project 2" },
  { id: 3, name: "Project 3" },
]

export function AppSidebar() {
  const [isCollapsed, setIsCollapsed] = React.useState(false)

  return (
    <SidebarProvider>
      <Sidebar
        className={cn(
          "flex flex-col border-r transition-all duration-300 ease-in-out",
          isCollapsed ? "w-[60px]" : "w-[250px]"
        )}
      >
        <SidebarHeader className="flex h-[60px] items-center justify-between px-2">
          <div className="flex items-center">
            <span className={cn(
              "font-bold transition-all duration-300 ease-in-out",
              isCollapsed ? "text-xl" : "text-xl"
            )}>
              {isCollapsed ? "W" : "WriteAway"}
            </span>
          </div>
          <button
            onClick={() => setIsCollapsed(!isCollapsed)}
            className="flex h-6 w-6 items-center justify-center rounded hover:bg-gray-100"
          >
            <ChevronLeft
              className={cn(
                "h-4 w-4 transition-all",
                isCollapsed && "rotate-180"
              )}
            />
          </button>
        </SidebarHeader>
        <SidebarContent className={cn(
          "flex-1 overflow-hidden transition-all duration-300 ease-in-out",
          isCollapsed ? "w-0 opacity-0" : "w-full opacity-100"
        )}>
          <div className="space-y-2 p-4">
            <h2 className="text-lg font-semibold">Projects</h2>
            <ul className="space-y-1">
              {projects.map((project) => (
                <li key={project.id}>
                  <Button variant="ghost" className="w-full justify-start">
                    {project.name}
                  </Button>
                </li>
              ))}
            </ul>
          </div>
        </SidebarContent>
        <SidebarFooter className={cn(
          "p-4 transition-all duration-300 ease-in-out",
          isCollapsed ? "hidden" : "block"
        )}>
          <Button variant="ghost" className="w-full justify-start">
            <User2 className="mr-2 h-4 w-4" />
            Account
          </Button>
        </SidebarFooter>
      </Sidebar>
    </SidebarProvider>
  )
}

================
File: components/canvas.tsx
================
"use client";

import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';
import ReactFlow, {
  Node,
  Edge,
  addEdge,
  Background,
  Controls,
  MiniMap,
  useNodesState,
  useEdgesState,
  ConnectionLineType,
  ReactFlowInstance,
  Viewport,
  NodeTypes,
} from 'reactflow';
import 'reactflow/dist/style.css';
import { SceneBox } from './scenebox';

// Default starting nodes
const initialNodes: Node[] = [
  {
    id: '1',
    type: 'sceneBox',
    position: { x: 100, y: 100 },
    data: { label: 'Scene 1' },
  },
  {
    id: '2',
    type: 'sceneBox',
    position: { x: 400, y: 100 },
    data: { label: 'Scene 2' },
  },
];

const initialEdges: Edge[] = [];

const Canvas: React.FC = () => {
  const reactFlowInstance = useRef<ReactFlowInstance | null>(null);
  const viewportRef = useRef<Viewport | null>(null);

  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);
  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);
  const [expandedNode, setExpandedNode] = useState<string | null>(null);

  const updateNodesWithoutChangingViewport = useCallback(
    (newNodes: Node[]) => {
      if (reactFlowInstance.current && viewportRef.current) {
        setNodes(newNodes);
        setTimeout(() => {
          reactFlowInstance.current?.setViewport(viewportRef.current!);
        }, 0);
      } else {
        setNodes(newNodes);
      }
    },
    [setNodes]
  );

  const onInit = useCallback((instance: ReactFlowInstance) => {
    reactFlowInstance.current = instance;
    viewportRef.current = instance.getViewport();
  }, []);

  const onMoveEnd = useCallback((event: any, viewport: Viewport) => {
    viewportRef.current = viewport;
  }, []);

  // Custom expand logic for SceneBox
  const handleExpand = useCallback((id: string, isExpanded: boolean) => {
    setExpandedNode(isExpanded ? id : null);
  }, []);

  // We define our nodeTypes for ReactFlow
  // Pass the custom props onExpand, isCurrentlyExpanded to SceneBox
  const nodeTypes: NodeTypes = useMemo(
    () => ({
      sceneBox: (props) => (
        <SnpceneBox
          {...props}
          onExpand={handleExpand}
          isCurrentlyExpanded={expandedNode === props.id}
        />
      ),
    }),
    [handleExpand, expandedNode]
  );

  return (
    <div style={{ width: '100%', height: '100vh' }}>
      <ReactFlow
        nodes={nodes}
        edges={edges}
        onNodesChange={onNodesChange}
        onEdgesChange={onEdgesChange}
        nodeTypes={nodeTypes}
        onInit={onInit}
        onMoveEnd={onMoveEnd}
        connectionLineType={ConnectionLineType.SmoothStep}
        fitView={false}
        snapToGrid
        snapGrid={[15, 15]}
      >
        <Background color="#999999" gap={15} />
        <Controls />
        <MiniMap />
      </ReactFlow>
    </div>
  );
};

export default Canvas;

================
File: components/scenebox.tsx
================
'use client'

import { useState } from 'react'
import { ChevronDown, Plus, Trash2, Edit, Link } from 'lucide-react'
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"

interface SceneBoxProps {
  number: number
  content: string
  onContentChange: (content: string) => void
  onDelete: () => void
}

export function SceneBox({ number, content, onContentChange, onDelete }: SceneBoxProps) {
  const [isExpanded, setIsExpanded] = useState(false)
  const [isHovered, setIsHovered] = useState(false)

  return (
    <div 
      className="relative w-64 h-48 bg-white border border-gray-200 rounded-lg shadow-md"
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
    >
      {/* Sequential Number */}
      <div className="absolute top-2 left-2 text-sm font-semibold text-gray-500">
        {number}
      </div>

      {/* Expand Icon */}
      <Button
        variant="ghost"
        size="icon"
        className="absolute top-1 right-1"
        onClick={() => setIsExpanded(!isExpanded)}
      >
        <ChevronDown className={`h-4 w-4 transition-transform ${isExpanded ? 'rotate-180' : ''}`} />
      </Button>

      {/* Text Area */}
      <Textarea
        className="w-full h-full p-6 pt-8 resize-none border-none focus:ring-0"
        value={content}
        onChange={(e) => onContentChange(e.target.value)}
        placeholder="Enter scene description..."
      />

      {/* Connection Circles */}
      <div className="absolute bottom-2 left-2 flex space-x-2">
        <div className="w-3 h-3 rounded-full bg-blue-500"></div>
        <div className="w-3 h-3 rounded-full bg-green-500"></div>
        <div className="w-3 h-3 rounded-full bg-red-500"></div>
      </div>

      {/* Hover Toolbar */}
      {isHovered && (
        <div className="absolute -top-10 left-1/2 transform -translate-x-1/2 bg-white border border-gray-200 rounded-md shadow-lg flex space-x-1 p-1">
          <Button variant="ghost" size="icon">
            <Plus className="h-4 w-4" />
          </Button>
          <Button variant="ghost" size="icon" onClick={onDelete}>
            <Trash2 className="h-4 w-4" />
          </Button>
          <Button variant="ghost" size="icon">
            <Edit className="h-4 w-4" />
          </Button>
          <Button variant="ghost" size="icon">
            <Link className="h-4 w-4" />
          </Button>
        </div>
      )}
    </div>
  )
}

================
File: components/toolbox1.tsx
================
'use client'

import { Plus, Trash2, Edit, Link } from 'lucide-react'
import { Button } from "@/components/ui/button"

interface Toolbox1Props {
  onDelete: () => void
}

export default function Toolbox1({ onDelete }: Toolbox1Props) {
  return (
    <div className="absolute -top-10 left-1/2 transform -translate-x-1/2 bg-white border border-gray-200 rounded-md shadow-lg flex space-x-1 p-1">
      <Button variant="ghost" size="icon">
        <Plus className="h-4 w-4" />
      </Button>
      <Button variant="ghost" size="icon" onClick={onDelete}>
        <Trash2 className="h-4 w-4" />
      </Button>
      <Button variant="ghost" size="icon">
        <Edit className="h-4 w-4" />
      </Button>
      <Button variant="ghost" size="icon">
        <Link className="h-4 w-4" />
      </Button>
    </div>
  )
}

================
File: components/toolbox2.tsx
================
'use client'

import { Plus, Trash2, Edit, Link, Settings } from 'lucide-react'
import { Button } from "@/components/ui/button"

export default function Toolbox2() {
  return (
    <div className="fixed bottom-4 left-1/2 transform -translate-x-1/2 bg-white border border-gray-200 rounded-md shadow-lg flex space-x-2 p-2">
      <Button variant="ghost" size="icon" className="h-10 w-10">
        <Plus className="h-5 w-5" />
      </Button>
      <Button variant="ghost" size="icon" className="h-10 w-10">
        <Trash2 className="h-5 w-5" />
      </Button>
      <Button variant="ghost" size="icon" className="h-10 w-10">
        <Edit className="h-5 w-5" />
      </Button>
      <Button variant="ghost" size="icon" className="h-10 w-10">
        <Link className="h-5 w-5" />
      </Button>
      <Button variant="ghost" size="icon" className="h-10 w-10">
        <Settings className="h-5 w-5" />
      </Button>
    </div>
  )
}

================
File: components/topbar.tsx
================
import React from 'react';

export default function Topbar() {
  return (
    <div className="fixed top-4 right-4">
      <a className="action-btn px-4 py-2 bg-gray text-white rounded hover:opacity-80" href="/login">
        View Screenplay
      </a>
    </div>
  );
}
